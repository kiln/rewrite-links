#!/usr/bin/env node

const fs = require("fs"),
      URL = require("url");

const minimist = require("minimist");

const RewriteLinks = require("../src");

let failed = false;

const args = minimist(process.argv.slice(2), {
	string: "base",
	alias: { "base": ["b"] },
	default: { "base": "." },
	unknown: function(unknown_option) {
		if (unknown_option.startsWith("-")) {
			console.error("Unknown option: " + unknown_option);
			failed = true;
		}
	}
});

let input_stream = process.stdin;
if (args._.length == 1) {
	input_stream = fs.createReadStream(args._[0]);
}
else if (args._.length > 1) {
	failed = true;
}

if (failed) {
	console.error(`Usage: ${require("path").basename(process.argv[1])} --base=foo/ [input.html]`);
	process.exitCode = 1;
}
else {
	const rewriter = new RewriteLinks(rewrite);
	rewriter.rewrite(input_stream)
		.then(process.stdout.write.bind(process.stdout))
		.catch((error) => console.error(error));
}


function rewrite(url) {
	// We donâ€™t want to rewrite URLs that are just fragment identifiers
	if (url.startsWith("#")) return url;

	// ... or relative self-links
	if (url == "" || url == ".") return url;

	return URL.resolve(args.base, url);
}
